#!/bin/sh


testAssertCallCountWrongArgumentCount() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething

    output=$(assertCallCount dosomething 2>&1)

    assertFalse "\`assertCallCount dosomething\` fails" $?
    assertEquals "Usage: assertCallCount [MESSAGE] SPY COUNT" "$output"
}

testAssertCallCountFail() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething

    output=$(assertCallCount dosomething 0)

    assertFalse "\`assertCallCount dosomething 0\` fails" $?
    printf '%s' "$output" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output begins with "ASSERT:"' $?
}

testAssertCallCountPass() {
    createSpy dosomething

    assertCallCount dosomething 0

    assertTrue "\`assertCallCount dosomething 0\` passes" $?
}

testAssertCallCountFailWithMessage() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething

    output=$(assertCallCount "shpymsg" dosomething 0)

    assertFalse "\`assertCallCount \"shpymsg\" dosomething 0\` fails" $?
    printf '%s' "$output" | grep "^${ANSI_COLOR_PATTERN}ASSERT" | grep -q "shpymsg"
    assertTrue 'output begins with "ASSERT:" and contains "shpymsg"' $?
}

testAssertCallCountPassWithMessage() {
    createSpy dosomething

    assertCallCount "shpymsg" dosomething 0

    assertTrue "\`assertCallCount \"shpymsg\" dosomething 0\` passes" $?
}

testAssertCalledWithWrongArgumentCount() {
    # shellcheck disable=SC2039
    local output

    output=$(assertCalledWith 2>&1)

    assertFalse "\`assertCalledWith\` fails" $?
    assertEquals "Usage: assertCalledWith SPY [ARG]..." "$output"
}

testAssertCalledWithFailure() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething somearg

    output=$(assertCalledWith dosomething anotherarg 2>/dev/null)

    assertFalse "\`assertCalledWith anotherarg\` fails" $?
    printf '%s' "$output" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output begins with "ASSERT:"' $?
}

testAssertCalledWithPass() {
    createSpy dosomething
    dosomething somearg

    assertCalledWith dosomething somearg

    assertTrue "\`assertCalledWith somearg\` passes" $?
}

testAssertCalledWith_AdvancesToTheNextCall() {
    createSpy dosomething
    dosomething somearg
    dosomething anotherarg

    assertCalledWith dosomething somearg
    assertTrue "\`assertCalledWith dosomething somearg\` passes" $?

    assertCalledWith dosomething anotherarg
    assertTrue "\`assertCalledWith dosomething anotherarg\` passes" $?
}

testAssertCalledWith_WrongArgumentCount() {
    # shellcheck disable=SC2039
    local output

    output=$(assertCalledWith_ "shpymsg" 2>&1)

    assertFalse "\`assertCalledWith_ \"shpymsg\"\` fails" $?
    assertEquals "Usage: assertCalledWith_ MESSAGE SPY [ARG]..." "$output"
}

testAssertCalledWith_Failure() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething somearg

    output=$(assertCalledWith_ "shpymsg" dosomething anotherarg 2>/dev/null)

    assertFalse "\`assertCalledWith_ \"shpymsg\" dosomething anotherarg\` fails" $?
    printf '%s' "$output" | grep "^${ANSI_COLOR_PATTERN}ASSERT" | grep -q "shpymsg"
    assertTrue 'output begins with "ASSERT:" and contains "shpymsg"' $?
}

testAssertCalledWith_Pass() {
    createSpy dosomething
    dosomething somearg

    assertCalledWith_ "shpymsg" dosomething somearg

    assertTrue "\`assertCalledWith_ \"shpymsg\" dosomething somearg\` passes" $?
}

testAssertCalledWith__AdvancesToTheNextCall() {
    createSpy dosomething
    dosomething somearg
    dosomething anotherarg

    assertCalledWith_ "shpymsg" dosomething somearg
    assertTrue "\`assertCalledWith_ \"shpymsg\" dosomething somearg\` passes" $?

    assertCalledWith_ "shpymsg" dosomething anotherarg
    assertTrue "\`assertCalledWith_  \"shpymsg\" dosomething anotherarg\` passes" $?
}

testAssertCalledOnceWithWrongArgumentCount() {
    # shellcheck disable=SC2039
    local output

    output=$(assertCalledOnceWith 2>&1)

    assertFalse "\`assertCalledOnceWith\` fails" $?
    assertEquals "Usage: assertCalledOnceWith SPY [ARG]..." "$output"
}

testAssertCalledOnceWithFail_WhenCalledMoreThanOnce() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething somearg
    dosomething anotherarg

    output=$(assertCalledOnceWith dosomething somearg)

    assertFalse "\`assertCalledOnceWith dosomething somearg\` fails" $?
    printf '%s' "$output" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output begins with "ASSERT:"' $?
}

testAssertCalledOnceWithPass() {
    createSpy dosomething
    dosomething somearg

    assertCalledOnceWith dosomething somearg

    assertTrue "\`assertCalledOnceWith dosomething somearg\` passes" $?
}

testAssertCalledOnceWith_WrongArgumentCount() {
    # shellcheck disable=SC2039
    local output

    output=$(assertCalledOnceWith_ "shpymsg" 2>&1)

    assertFalse "\`assertCalledOnceWith_ \"shpymsg\"\` fails" $?
    assertEquals "Usage: assertCalledOnceWith_ MESSAGE SPY [ARG]..." "$output"
}

testAssertCalledOnceWith_Fail_WhenCalledMoreThanOnce() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething somearg
    dosomething anotherarg

    output=$(assertCalledOnceWith_ "shpymsg" dosomething somearg)

    assertFalse "\`assertCalledOnceWith_ \"shpymsg\" dosomething somearg\` fails" $?
    printf '%s' "$output" | grep "^${ANSI_COLOR_PATTERN}ASSERT" | grep -q "shpymsg"
    assertTrue 'output begins with "ASSERT:" and contains "shpymsg"' $?
}

testAssertCalledOnceWith_Pass() {
    createSpy dosomething
    dosomething somearg

    assertCalledOnceWith_ "shpymsg" dosomething somearg

    assertTrue "\`assertCalledOnceWith_ \"shpymsg\" dosomething somearg\` passes" $?
}

testAssertNeverCalledWrongArgumentCount() {
    # shellcheck disable=SC2039
    local output

    output=$(assertNeverCalled 2>&1)

    assertFalse "\`assertNeverCalled\` fails" $?
    assertEquals "Usage: assertNeverCalled [MESSAGE] SPY" "$output"
}

testAssertNeverCalledPass_WhenNotCalled() {
    createSpy dosomething

    assertNeverCalled dosomething

    assertTrue "\`assertNeverCalled dosomething\` passes" $?
}

testAssertNeverCalledFail_WhenCalledOnce() {
    # shellcheck disable=SC2039
    local output
    createSpy dosomething
    dosomething

    output=$(assertNeverCalled dosomething)
    assertFalse "\`assertNeverCalled dosomething\` fails" $?
    printf '%s' "$output" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output begins with "ASSERT:"' $?
}
