#!/usr/bin/env sh

#
# assertCallCount tests
#

itDisplaysUsageWhenAssertCallCountHasTooFewArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: assertCallCount [message] spy count' \
      "$(assertCallCount dosomething 2>&1 | head -n1)"
}

itReturns1WhenAssertCallCountHasTooFewArgs() {
    assertCallCount dosomething >/dev/null
    assertEquals 1 $?
}

itDisplaysAssertionWhenAssertCallCountFails() {
    doOrDie createSpy dosomething
    dosomething

    printf '%s' "$(assertCallCount dosomething 0)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertCallCountFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    printf '%s' "$(assertCallCount dosomething 0)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:" from new shell' $?
}

itReturns1WhenAssertCallCountFails() {
    doOrDie createSpy dosomething
    dosomething

    (assertCallCount dosomething 0 >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertCallCountFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    (assertCallCount dosomething 0 >/dev/null)
    assertEquals 1 $?
}

itDisplaysNothingWhenAssertCallCountPasses() {
    doOrDie createSpy dosomething

    assertEquals 'call count assertion output unexpectedly' '' "$(assertCallCount dosomething 0 2>&1)"
}

itReturns0WhenAssertCallCountPasses() {
    doOrDie createSpy dosomething

    assertCallCount dosomething 0
    assertEquals 0 $?
}

itDisplaysAssertionWhenAssertCallCountFailsWithOptionalMessage() {
    doOrDie createSpy dosomething

    printf '%s' "$(assertCallCount "shpymsg" dosomething 999)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'assertion output does not begin with "ASSERT:"' $?
}

itDisplaysOptionalMessageWhenAssertCallCountFails() {
    doOrDie createSpy dosomething

    printf '%s' "$(assertCallCount "shpymsg" dosomething 999)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain optional message' $?
}

itDisplaysNothingWhenAssertCallCountPassesWithOptionalMessage() {
    doOrDie createSpy dosomething

    assertEquals 'unexpected output' '' "$(assertCallCount "shpymsg" dosomething 0)"
}

itReturns0WhenAssertCallCountPassesWithOptionalMessage() {
    doOrDie createSpy dosomething

    assertCallCount 'message' dosomething 0
    assertEquals 0 $?
}

#
# assertCalledWith tests
#

itDisplaysUsageWhenAssertCalledWithHasTooFewArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: assertCalledWith spy [arg ...]' \
      "$(assertCalledWith 2>&1 | head -n1)"
}

itReturns1WhenAssertCalledWithHasTooFewArgs() {
    assertCalledWith >/dev/null
    assertEquals 1 $?
}

itDisplaysAssertionWhenAssertCalledWithFails() {
    doOrDie createSpy dosomething
    dosomething 123

    printf '%s' "$(assertCalledWith dosomething 456 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertCalledWithFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    printf '%s' "$(assertCalledWith dosomething 456 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:" from new shell' $?
}

itReturns1WhenAssertCalledWithFails() {
    doOrDie createSpy dosomething
    dosomething 123

    (assertCalledWith dosomething 456 >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertCalledWithFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    (assertCalledWith dosomething 456 >/dev/null)
    assertEquals 1 $?
}

itDisplaysNothingWhenAssertCalledWithPasses() {
    doOrDie createSpy dosomething
    dosomething 123

    assertEquals 'unexpected output' '' "$(assertCalledWith dosomething 123 1>&2)"
}

itDisplaysNothingWhenAssertCalledWithPassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertEquals 'unexpected output from new shell' '' "$(assertCalledWith dosomething 123 1>&2)"
}

itReturns0WhenAssertCalledWithPasses() {
    doOrDie createSpy dosomething
    dosomething 123

    assertCalledWith dosomething 123
    assertEquals 0 $?
}

itReturns0WhenAssertCalledWithPassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertCalledWith dosomething 123
    assertEquals 0 $?
}

itAdvancesToNextCallAfterAssertCalledWith() {
    doOrDie createSpy dosomething
    dosomething 1
    dosomething 2

    assertCalledWith dosomething 1
    assertEquals 'first assertion was not for first call' 0 $?

    assertCalledWith dosomething 2
    assertEquals 'second assertion was not for second call' 0 $?
}

itAdvancesToNextCallAfterAssertCalledWithInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 1
    runInNewShell dosomething 2

    assertCalledWith dosomething 1
    assertEquals 'first assertion was not for first call in new shell' 0 $?

    assertCalledWith dosomething 2
    assertEquals 'second assertion was not for second call in new shell' 0 $?
}

#
# assertCalledWith_ tests
#

itDisplaysUsageWhenAssertCalledWith_HasTooFewArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: assertCalledWith_ message spy [arg ...]' \
      "$(assertCalledWith_ 2>&1 | head -n1)"
}

itReturns1WhenAssertCalledWith_HasTooFewArgs() {
    assertCalledWith_ >/dev/null
    assertEquals 1 $?
}

itDisplaysAssertionWhenAssertCalledWith_Fails() {
    doOrDie createSpy dosomething
    dosomething 123

    printf '%s' "$(assertCalledWith_ 'message' dosomething 456 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertCalledWith_FailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    printf '%s' "$(assertCalledWith_ 'message' dosomething 456 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:" from new shell' $?
}

itDisplaysMessageWhenAssertCalledWith_Fails() {
    doOrDie createSpy dosomething
    dosomething 123

    printf '%s' "$(assertCalledWith_ 'shpymsg' dosomething 456)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain custom message' $?
}

itDisplaysMessageWhenAssertCalledWith_FailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    printf '%s' "$(assertCalledWith_ 'shpymsg' dosomething 456)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain custom message from new shell' $?
}

itReturns1WhenAssertCalledWith_Fails() {
    doOrDie createSpy dosomething
    dosomething 123

    (assertCalledWith_ 'message' dosomething 456 >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertCalledWith_FailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    (assertCalledWith_ 'message' dosomething 456 >/dev/null)
    assertEquals 1 $?
}

itDisplaysNothingWhenAssertCalledWith_Passes() {
    doOrDie createSpy dosomething
    dosomething 123

    assertEquals 'unexpected output' '' "$(assertCalledWith_ 'message' dosomething 123)"
}

itDisplaysNothingWhenAssertCalledWith_PassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertEquals 'unexpected output from new shell' '' "$(assertCalledWith_ 'message' dosomething 123)"
}

itReturns0WhenAssertCalledWith_Passes() {
    doOrDie createSpy dosomething
    dosomething 123

    assertCalledWith_ 'message' dosomething 123
    assertEquals 0 $?
}

itReturns0WhenAssertCalledWith_PassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertCalledWith_ 'message' dosomething 123
    assertEquals 0 $?
}

itAdvancesToNextCallAfterAssertCalledWith_() {
    doOrDie createSpy dosomething
    dosomething 1
    dosomething 2

    assertCalledWith_ 'message' dosomething 1
    assertEquals 'first assertion was not for first call' 0 $?

    assertCalledWith_ 'message' dosomething 2
    assertEquals 'second assertion was not for second call' 0 $?
}

itAdvancesToNextCallAfterAssertCalledWith_InNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 1
    runInNewShell dosomething 2

    assertCalledWith_ 'message' dosomething 1
    assertEquals 'first assertion was not for first call in new shell' 0 $?

    assertCalledWith_ 'message' dosomething 2
    assertEquals 'second assertion was not for second call in new shell' 0 $?
}

#
# assertCalledOnce tests
#

itDisplaysUsageWhenAssertCalledOnceWithHasTooFewArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: assertCalledOnceWith spy [arg ...]' \
      "$(assertCalledOnceWith 2>&1 | head -n1)"
}

itReturns1WhenAssertCalledOnceWithHasTooFewArgs() {
    assertCalledOnceWith >/dev/null
    assertEquals 1 $?
}

itDisplaysAssertionWhenAssertCalledOnceWithFails() {
    doOrDie createSpy dosomething
    dosomething 123
    dosomething 456

    printf '%s' "$(assertCalledOnceWith dosomething 123 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertCalledOnceWithFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123
    runInNewShell dosomething 456

    printf '%s' "$(assertCalledOnceWith dosomething 123 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:" from new shell' $?
}

itReturns1WhenAssertCalledOnceWithFails() {
    doOrDie createSpy dosomething
    dosomething 123
    dosomething 456

    (assertCalledOnceWith dosomething 123 >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertCalledOnceWithFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123
    runInNewShell dosomething 456

    (assertCalledOnceWith dosomething 123 >/dev/null)
    assertEquals 1 $?
}

itDisplaysNothingWhenAssertCalledOnceWithPasses() {
    doOrDie createSpy dosomething
    dosomething 123

    assertEquals 'unexpected output' '' "$(assertCalledOnceWith dosomething 123 2>&1)"
}

itDisplaysNothingWhenAssertCalledOnceWithPassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertEquals 'unexpected output from new shell' '' "$(assertCalledOnceWith dosomething 123 2>&1)"
}

itReturns0WhenAssertCalledOnceWithPasses() {
    doOrDie createSpy dosomething
    dosomething 123

    assertCalledOnceWith dosomething 123
    assertEquals 0 $?
}

itReturns0WhenAssertCalledOnceWithPassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertCalledOnceWith dosomething 123
    assertEquals 0 $?
}

#
# assertCalledOnceWith_ tests
#

itDisplaysUsageWhenAssertCalledOnceWith_HasTooFewArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: assertCalledOnceWith_ message spy [arg ...]' \
      "$(assertCalledOnceWith_ 2>&1 | head -n1)"
}

itReturns1WhenAssertCalledOnceWith_HasTooFewArgs() {
    assertCalledOnceWith_ >/dev/null
    assertEquals 1 $?
}

itDisplaysAssertionWhenAssertCalledOnceWith_Fails() {
    doOrDie createSpy dosomething
    dosomething 123

    printf '%s' "$(assertCalledOnceWith_ 'message' dosomething 456 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertCalledOnceWith_FailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    printf '%s' "$(assertCalledOnceWith_ 'message' dosomething 456 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:" from new shell' $?
}

itDisplaysMessageWhenAssertCalledOnceWith_Fails() {
    doOrDie createSpy dosomething
    dosomething 123

    printf '%s' "$(assertCalledOnceWith_ 'shpymsg' dosomething 456)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain custom message' $?
}

itDisplaysMessageWhenAssertCalledOnceWith_FailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    printf '%s' "$(assertCalledOnceWith_ 'shpymsg' dosomething 456)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain custom message from new shell' $?
}

itReturns1WhenAssertCalledOnceWith_Fails() {
    doOrDie createSpy dosomething
    dosomething 123

    (assertCalledOnceWith_ 'message' dosomething 456 >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertCalledOnceWith_FailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    (assertCalledOnceWith_ 'message' dosomething 456 >/dev/null)
    assertEquals 1 $?
}

itDisplaysNothingWhenAssertCalledOnceWith_Passes() {
    doOrDie createSpy dosomething
    dosomething 123

    assertEquals 'unexpected output' '' "$(assertCalledOnceWith_ 'message' dosomething 123 2>&1)"
}

itDisplaysNothingWhenAssertCalledOnceWith_PassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertEquals 'unexpected output from new shell' '' "$(assertCalledOnceWith_ 'message' dosomething 123 2>&1)"
}

itReturns0WhenAssertCalledOnceWith_Passes() {
    doOrDie createSpy dosomething
    dosomething 123

    assertCalledOnceWith_ 'message' dosomething 123
    assertEquals 0 $?
}

itReturns0WhenAssertCalledOnceWith_PassesInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething 123

    assertCalledOnceWith_ 'message' dosomething 123
    assertEquals 0 $?
}

#
# assertNeverCalled tests
#

itDisplaysUsageWhenAssertNeverCalledHasTooFewArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: assertNeverCalled [message] spy' \
      "$(assertNeverCalled 2>&1 | head -n1)"
}

itReturns1WhenAssertNeverCalledHasTooFewArgs() {
    assertNeverCalled >/dev/null
    assertEquals 1 $?
}

itDisplaysAssertionWhenAssertNeverCalledFails() {
    doOrDie createSpy dosomething
    dosomething

    printf '%s' "$(assertNeverCalled dosomething 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertNeverCalledFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    printf '%s' "$(assertNeverCalled dosomething 2>/dev/null)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'output does not begin with "ASSERT:" from new shell' $?
}

itReturns1WhenAssertNeverCalledFails() {
    doOrDie createSpy dosomething
    dosomething

    (assertNeverCalled dosomething >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertNeverCalledFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    (assertNeverCalled dosomething >/dev/null)
    assertEquals 1 $?
}

itDisplaysNothingWhenAssertNeverCalledPasses() {
    doOrDie createSpy dosomething

    assertEquals 'unexpected output' '' "$(assertNeverCalled dosomething 2>&1)"
}

itReturns0WhenAssertNeverCalledPasses() {
    doOrDie createSpy dosomething

    assertNeverCalled dosomething
    assertEquals 0 $?
}

itDisplaysAssertionWhenAssertNeverCalledFailsWithOptionalMessage() {
    doOrDie createSpy dosomething
    dosomething

    printf '%s' "$(assertNeverCalled "shpymsg" dosomething)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'assertion output does not begin with "ASSERT:"' $?
}

itDisplaysAssertionWhenAssertNeverCalledFailsWithOptionalMessageInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    printf '%s' "$(assertNeverCalled "shpymsg" dosomething)" | grep -q "^${ANSI_COLOR_PATTERN}ASSERT"
    assertTrue 'assertion output does not begin with "ASSERT:" from new shell' $?
}

itDisplaysOptionalMessageWhenAssertNeverCalledFails() {
    doOrDie createSpy dosomething
    dosomething

    printf '%s' "$(assertNeverCalled "shpymsg" dosomething)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain optional message' $?
}

itDisplaysOptionalMessageWhenAssertNeverCalledFailsInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    printf '%s' "$(assertNeverCalled "shpymsg" dosomething)" | grep -q "shpymsg"
    assertTrue 'assertion output does not contain optional message from new shell' $?
}

itReturns1WhenAssertNeverCalledFailsWithOptionalMessage() {
    doOrDie createSpy dosomething
    dosomething

    (assertNeverCalled 'message' dosomething >/dev/null)
    assertEquals 1 $?
}

itReturns1WhenAssertNeverCalledFailsWithOptionalMessageInNewShell() {
    doOrDie createSpy dosomething
    runInNewShell dosomething

    (assertNeverCalled 'message' dosomething >/dev/null)
    assertEquals 1 $?
}
