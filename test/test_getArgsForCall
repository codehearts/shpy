#!/bin/sh

itDisplaysUsageWhenGettingCallArgsWithoutArgs() {
    assertEquals 'usage message was not displayed' 'Usage: getArgsForCall SPY CALL_NUMBER' "$(getArgsForCall 2>&1)"
}

itReturns1WhenGettingCallArgsWithoutArgs() {
    getArgsForCall >/dev/null 2>&1
    assertEquals 1 $?
}

itDisplaysUsageWhenGettingCallArgsWithOneArg() {
    assertEquals 'usage message was not displayed' 'Usage: getArgsForCall SPY CALL_NUMBER' "$(getArgsForCall someSpy 2>&1)"
}

itReturns1WhenGettingCallArgsWithOneArg() {
    getArgsForCall someSpy >/dev/null 2>&1
    assertEquals 1 $?
}

itDisplaysErrorWhenGettingCallArgsBeforeSpyIsCreated() {
    printf '%s\n' "$(getArgsForCall invalidSpy 1 2>&1 >/dev/null)" | grep -qx "Error: no spies have been created"
    assertTrue 'output contains incorrect error message' $?
}

itReturns1WhenGettingCallArgsBeforeSpyIsCreated() {
    getArgsForCall invalidSpy 1 >/dev/null 2>&1
    assertEquals 1 $?
}

itDisplaysErrorWhenGettingCallArgsForInvalidSpy() {
    doOrDie createSpy someSpy

    printf '%s\n' "$(getArgsForCall invalidSpy 1 2>&1 >/dev/null)" | grep -qx "Error: spy 'invalidSpy' has not been set up"
    assertTrue 'output contains incorrect error message' $?
}

itReturns1WhenGettingCallArgsForInvalidSpy() {
    doOrDie createSpy someSpy

    getArgsForCall invalidSpy 1 >/dev/null 2>&1
    assertEquals 1 $?
}

itDisplaysErrorWhenGettingCallArgsForInvalidCallNumber() {
    doOrDie createSpy someSpy
    someSpy

    printf '%s\n' "$(getArgsForCall someSpy 999 2>&1 >/dev/null)" | grep -q '^Error:'
    assertTrue 'output does not begin with "Error:"' $?
}

itReturns1WhenGettingCallArgsForInvalidCallNumber() {
    doOrDie createSpy someSpy
    someSpy

    getArgsForCall someSpy 999 >/dev/null 2>&1
    assertEquals 1 $?
}

itOutputsNothingWhenGettingCallArgsForCallWithoutArgs() {
    doOrDie createSpy someSpy
    someSpy
    someSpy

    assertEquals 'output is not empty for call without args' '' "$(getArgsForCall someSpy 1 2>&1)"

    assertEquals 'output is not empty for call without args' '' "$(getArgsForCall someSpy 2 2>&1)"
}

itReturns0WhenGettingCallArgsForCallWithoutArgs() {
    doOrDie createSpy someSpy
    someSpy
    someSpy

    getArgsForCall someSpy 1 >/dev/null 2>&1
    assertTrue 'first call returned a non-zero status' $?

    getArgsForCall someSpy 2 >/dev/null 2>&1
    assertTrue 'second call returned a non-zero status' $?
}

itOutputsNoQuotesAroundSingleWordArgsWhenGettingCallArgs() {
    doOrDie createSpy someSpy
    someSpy "foo" bar 'baz'

    assertEquals 'args were not output without quotes' 'foo bar baz' "$(getArgsForCall someSpy 1 2>&1)"
}

itOutputsDoubleQuotesAroundMultiWordArgsWhenGettingCallArgs() {
    doOrDie createSpy someSpy
    someSpy "foo bar" abc def 'baz bat' "$(printf "tab\\tinside")"

    assertEquals 'multi-word args were not output with double quotes' \
        "$(printf '"foo bar" abc def "baz bat" "tab\tinside"')" \
        "$(getArgsForCall someSpy 1 2>&1)"
}

itOutputsCorrectArgsForCallNumberWhenGettingCallArgs() {
    doOrDie createSpy someSpy

    someSpy foo
    someSpy
    someSpy -a "foo bar" -baz

    assertEquals "incorrect args output for first call" "foo" "$(getArgsForCall someSpy 1 2>&1)"

    assertEquals "incorrect args output for second call" '' "$(getArgsForCall someSpy 2 2>&1)"

    assertEquals "incorrect args output for third call" '-a "foo bar" -baz' "$(getArgsForCall someSpy 3 2>&1)"
}
