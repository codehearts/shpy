#!/usr/bin/env sh

itDisplaysUsageWhenCreatingSpyWithoutArgs() {
    assertEquals 'usage message was not displayed' \
      'Usage: createSpy [[-r status] [-o output] [-e output] [-u] ...] name' \
      "$(createSpy 2>&1 | head -n1)"
}

itReturns1WhenCreatingSpyWithoutArgs() {
    createSpy >/dev/null
    assertEquals 1 $?
}

itDiesWhenCreatingSpyWithUnknownOption() {
    assertDies 'createSpy -z' 'Error: Unknown option -z'
}

itDisplaysUsageWhenCreatingSpyWithRequiredArgMissing() {
    assertEquals 'usage message was not displayed' \
      'Usage: createSpy [[-r status] [-o output] [-e output] [-u] ...] name' \
      "$(createSpy -r dosomething 2>&1 | head -n1)"
}

itReturns1WhenCreatingSpyWithRequiredArgMissing() {
    createSpy -r dosomething >/dev/null
    assertEquals 1 $?
}

itCreatesFunctionWhenCreatingSpyWithOneArg() {
    doOrDie createSpy dosomething

    dosomething
    assertEquals 'function was not created for spy' 0 $?
}

itStubsReturnValueOfCreatedSpy() {
    doOrDie createSpy -r 123 dosomething

    dosomething
    assertEquals 'return value was not stubbed' 123 $?
}

itStubsReturnValueOfCreatedSpyInNewShell() {
    doOrDie createSpy -r 123 dosomething

    runInNewShell dosomething
    assertEquals 'return value was not stubbed in new shell' 123 $?
}

itStubsReturnValuesPerSpy() {
    doOrDie createSpy -r 1 dosomething
    doOrDie createSpy -r 2 domore

    dosomething
    assertEquals 'dosomething did not return the stubbed value' 1 $?
    domore
    assertEquals 'domore did not return the stubbed value' 2 $?
}

itStubsReturnValuesPerSpyInNewShell() {
    doOrDie createSpy -r 1 dosomething
    doOrDie createSpy -r 2 domore

    runInNewShell dosomething
    assertEquals 'dosomething did not return the stubbed value in new shell' 1 $?
    runInNewShell domore
    assertEquals 'domore did not return the stubbed value in new shell' 2 $?
}

itStubsMultipleReturnValuesAsSequence() {
    doOrDie createSpy -r 2 -r 1 -r 0 dosomething

    dosomething
    assertEquals 'first return value is not the first stubbed value' 2 $?

    dosomething
    assertEquals 'second return value is not the second stubbed value' 1 $?

    dosomething
    assertEquals 'third return value is not the third stubbed value' 0 $?

    dosomething
    assertEquals 'subsequent return values are not the last stubbed value' 0 $?
}

itStubsMultipleReturnValuesAsSequenceInNewShell() {
    doOrDie createSpy -r 2 -r 1 -r 0 dosomething

    runInNewShell dosomething
    assertEquals 'first return value is not the first stubbed value in new shell' 2 $?

    runInNewShell dosomething
    assertEquals 'second return value is not the second stubbed value in new shell' 1 $?

    runInNewShell dosomething
    assertEquals 'third return value is not the third stubbed value in new shell' 0 $?

    runInNewShell dosomething
    assertEquals 'subsequent return values are not the last stubbed value in new shell' 0 $?
}

itResetsStubbedReturnValueWhenRecreatingSpy() {
    doOrDie createSpy -r 123 dosomething

    createSpy dosomething

    dosomething
    assertEquals 'stubbed return value was not reset' 0 $?
}

itStubsOutputOfCreatedSpy() {
    doOrDie createSpy -o "$(printf 'some\noutput')" dosomething
    assertEquals 'output was not stubbed' "$(printf 'some\noutput')" "$(dosomething)"
}

itStubsOutputOfCreatedSpyInNewShell() {
    doOrDie createSpy -o "$(printf 'some\noutput')" dosomething
    assertEquals 'output was not stubbed in new shell' "$(printf 'some\noutput')" "$(runInNewShell dosomething)"
}

itStubsMultipleOutputsAsSequence() {
    # shellcheck disable=SC2039
    local first_output second_output third_output
    first_output=$(printf "%s\\n%s" "first" "output")
    second_output="second OUTPUT"
    third_output="$(printf 'Third\nOutput')"

    doOrDie createSpy -o "$first_output" -o "$second_output" -o "$third_output" dosomething
  
    assertEquals 'first output is not the first stubbed value' "$first_output" "$(dosomething)"

    assertEquals 'second output is not the second stubbed value' "$second_output" "$(dosomething)"

    assertEquals 'third output is not the third stubbed value' "$third_output" "$(dosomething)"

    assertEquals 'subsequent output is not the last stubbed value' "$third_output" "$(dosomething)"
}

itStubsMultipleOutputsAsSequenceInNewShell() {
    # shellcheck disable=SC2039
    local first_output second_output third_output
    first_output=$(printf "%s\\n%s" "first" "output")
    second_output="second OUTPUT"
    third_output="$(printf 'Third\nOutput')"

    doOrDie createSpy -o "$first_output" -o "$second_output" -o "$third_output" dosomething
  
    assertEquals 'first output is not the first stubbed value in new shell' "$first_output" "$(runInNewShell dosomething)"

    assertEquals 'second output is not the second stubbed value in new shell' "$second_output" "$(runInNewShell dosomething)"

    assertEquals 'third output is not the third stubbed value in new shell' "$third_output" "$(runInNewShell dosomething)"

    assertEquals 'subsequent output is not the last stubbed value in new shell' "$third_output" "$(runInNewShell dosomething)"
}

itResetsStubbedOutputWhenRecreatingSpy() {
    doOrDie createSpy -o 'some output' dosomething

    createSpy dosomething
    assertNull 'stubbed output was not reset' "$(dosomething)"
}

itStubsErrorOutputOfCreatedSpy() {
    doOrDie createSpy -e "$(printf 'some\noutput')" dosomething
    assertEquals 'error output was not stubbed' "$(printf 'some\noutput')" "$(dosomething 2>&1 >/dev/null)"
}

itStubsErrorOutputOfCreatedSpyInNewShell() {
    doOrDie createSpy -e "$(printf 'some\noutput')" dosomething
    assertEquals 'error output was not stubbed in new shell' "$(printf 'some\noutput')" "$(runInNewShell dosomething 2>&1 >/dev/null)"
}

itStubsMultipleErrorOutputsAsSequence() {
    # shellcheck disable=SC2039
    local first_output second_output third_output
    first_output=$(printf "%s\\n%s" "first" "output")
    second_output="second OUTPUT"
    third_output="$(printf 'Third\nOutput')"

    doOrDie createSpy -e "$first_output" -e "$second_output" -e "$third_output" dosomething
  
    assertEquals 'first error output is not the first stubbed value' "$first_output" "$(dosomething 2>&1 >/dev/null)"

    assertEquals 'second error output is not the second stubbed value' "$second_output" "$(dosomething 2>&1 >/dev/null)"

    assertEquals 'third error output is not the third stubbed value' "$third_output" "$(dosomething 2>&1 >/dev/null)"

    assertEquals 'subsequent error output is not the last stubbed value' "$third_output" "$(dosomething 2>&1 >/dev/null)"
}

itStubsMultipleErrorOutputsAsSequenceInNewShell() {
    # shellcheck disable=SC2039
    local first_output second_output third_output
    first_output=$(printf "%s\\n%s" "first" "output")
    second_output="second OUTPUT"
    third_output="$(printf 'Third\nOutput')"

    doOrDie createSpy -e "$first_output" -e "$second_output" -e "$third_output" dosomething
  
    assertEquals 'first error output is not the first stubbed value in new shell' "$first_output" "$(runInNewShell dosomething 2>&1 >/dev/null)"

    assertEquals 'second error output is not the second stubbed value in new shell' "$second_output" "$(runInNewShell dosomething 2>&1 >/dev/null)"

    assertEquals 'third error output is not the third stubbed value in new shell' "$third_output" "$(runInNewShell dosomething 2>&1 >/dev/null)"

    assertEquals 'subsequent error output is not the last stubbed value in new shell' "$third_output" "$(runInNewShell dosomething 2>&1 >/dev/null)"
}

itResetsStubbedErrorOutputWhenRecreatingSpy() {
    doOrDie createSpy -e 'some output' dosomething

    createSpy dosomething
    assertNull 'stubbed error output was not reset' "$(dosomething 2>&1 >/dev/null)"
}

itDisplaysStandardOutputBeforeErrorOutput() {
    doOrDie createSpy -o 'stdout' -e 'stderr' dosomething
    assertEquals 'stdout was not displayed before stderr' \
      "$(printf 'stdout\nstderr')" \
      "$(dosomething 2>&1)"
}

itCallsSpyOnChainedFunction() {

    f1() { echo "Output from locally defined f1"; }
    f2() { f1; }

    doOrDie createSpy -o 'Output from spy on f1' -u f1

    assertEquals 'Locally defined function was called instead of spy' \
      "Output from spy on f1" \
      "$(f2)"
    
}

itOutputsStderrMsgForDeclaredFunction() {

    f1() { echo "Output from locally defined f1"; }
    f2() { f1; }

    out="$(doOrDie createSpy -o 'Output from spy on f1' f1 2>&1)"
    
    assertEquals 'createSpy did not output warning about declared function' \
        "Function f1 is declared and will be called instead of spy. Add -u to createSpy to unset it." \
        "$out"
}

# Helper method to run the same case with output defined in different orders
# $1 - 0 to define all stdout before stderr, 1 to interleave the definitions
do_multiple_outputs_test() {
    # shellcheck disable=SC2039
    local first_output second_output first_err second_err third_err test_label

    first_output="first stdout"
    second_output="Second STDOUT"
    first_err="first err"
    second_err="Second ERR"
    third_err="THIRD err"

    if [ "$1" -eq "1" ]; then
        doOrDie createSpy \
            -o "$first_output" \
            -e "$first_err" \
            -o "$second_output" \
            -e "$second_err" \
            -e "$third_err" \
            dosomething

        test_label="interleaved"
    else
        doOrDie createSpy \
            -o "$first_output" \
            -o "$second_output" \
            -e "$first_err" \
            -e "$second_err" \
            -e "$third_err" \
            dosomething

        test_label="separated"
    fi

    assertEquals "first combined output is not the first $test_label output values" \
      "$(printf '%s\n%s' "$first_output" "$first_err")" \
      "$(dosomething 2>&1)"

    assertEquals "second combined output is not the second $test_label output values" \
      "$(printf '%s\n%s' "$second_output" "$second_err")" \
      "$(dosomething 2>&1)"

    assertEquals "third combined output is not the third $test_label output values" \
      "$(printf '%s\n%s' "$second_output" "$third_err")" \
      "$(dosomething 2>&1)"
}

itOutputsStdoutBeforeStderrWhenOutputsAreDefinedInSeparateGroups() {
    do_multiple_outputs_test 0
}

itOutputsStdoutBeforeStderrWhenOutputsAreDefinedIntervleaved() {
    do_multiple_outputs_test 1
}

itResetsCallCountWhenRecreatingSpy() {
    doOrDie createSpy dosomething
    dosomething

    createSpy dosomething

    assertEquals 'call count was not reset' 0 "$(getSpyCallCount dosomething)"
}

# This tests exists so kcov can see what is covered by the spy scripts
itSupportsSourcingSpies() {
    doOrDie createSpy -o 'hello' -e 'world' -o 'goodnight' -e 'moon' dosomething

    # Set arguments for the sourced spy
    set -- arg1 arg2

    # shellcheck source=/dev/null
    assertEquals 'first call output was not stubbed' \
      "$(printf 'hello\nworld')" \
      "$(. "${_shpy_spies_dir:-shpy dir is not set}/bin/dosomething" 2>&1)"

    # shellcheck source=/dev/null
    assertEquals 'second call output was not stubbed' \
      "$(printf 'goodnight\nmoon')" \
      "$(. "${_shpy_spies_dir:-shpy dir is not set}/bin/dosomething" 2>&1)"

    # shellcheck source=/dev/null
    assertEquals 'third call output was not stubbed' \
      "$(printf 'goodnight\nmoon')" \
      "$(. "${_shpy_spies_dir:-shpy dir is not set}/bin/dosomething" 2>&1)"

    wasSpyCalledWith dosomething arg1 arg2
    assertTrue 'args were not recorded' $?
}
