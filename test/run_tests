#!/usr/bin/env sh

# Disallow unset variables in tests
set -o nounset

# Determine the location of this script, and subsequently the test directory
test_directory=$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)

# Define a global regex pattern to match an optional ANSI color code
ANSI_COLOR_PATTERN="$(printf '\\(\033\[[0-9];[0-9]\+m\\)\\?')"
readonly ANSI_COLOR_PATTERN
export ANSI_COLOR_PATTERN

# Determine the current shell executable by parsing the current process info
# Ignore shellcheck's recommendation to use pgrep, as it may not be available
# shellcheck disable=SC2009
SHELL="$(ps -e | grep -Eo "\b$$\b.+[0-9:.]+\s+\S+\b")"
SHELL="${SHELL##* }"

# Use bash if kcov is collecting coverage because no other shell is supported
if [ -n "${KCOV_BASH_COMMAND:+is_set}" ]; then
  SHELL=bash
fi

#
# Testcase discovery function
#

readonly testcase_regex='^\s*(it[A-Za-z0-9_-]*\s*\(\))'

# Outputs a list of all testcases found in $1 to stdout
get_test_cases_from_file() {
  grep -E "$testcase_regex" "$1" | sed 's/^\s*\([A-Za-z0-9_-]*\).*$/\1/g'
}

#
# Test helpers
#

# Asserts that the given code calls shpy_die
# $1 - Code expected to call shpy_die
# $2 - Optional expected death message
# $3 - Optional expected death exit status
assertDies() {
  ($1 >/dev/null 2>&1)
  assertEquals 'Died with unexpected exit status' "${3:-1}" "$?"
  assertEquals 'Died with unexpected message' "${2:-"Error: aborting"}" "$($1 2>&1)"
}

# Attempts to execute the given code and fails the test if an error occurs
# $1... - Code to execute or fail from
doOrDie() {
    "$@" || fail "Failed to execute \`$*\`"
}

# Runs the given command in a new process of the parent shell
# $1... - Command to execute
runInNewShell() {
  $SHELL -c "$*"
}

#
# Run tests
#

suite() {
  # Iterate through all test files
  test_files="$(find "$test_directory" -name 'test_*' -type f)"
  for test_file in $test_files; do
    for test_case in $(get_test_cases_from_file "$test_file"); do
      suite_addTest "$test_case"
    done

    # shellcheck source=/dev/null
    . "$test_file"
  done
}

# Clean up spies after each test
tearDown() {
  cleanupSpies
}

# Define the path to shpy
SHPY_PATH="$test_directory/../shpy"
export SHPY_PATH

# Source shpy and shunit2 to begin running tests
# shellcheck source=/dev/null
. "$test_directory/../shpy"
# shellcheck source=/dev/null
. "$test_directory/../shpy-shunit2"
# shellcheck source=/dev/null
. "$(command -v shunit2)"
