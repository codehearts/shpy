#!/bin/sh

# Disallow unset variables in tests
set -o nounset

# Determine the location of this script, and subsequently the test directory
test_directory=$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)

# Define a global regex pattern to match an optional ANSI color code
readonly ANSI_COLOR_PATTERN="$(printf '\\(\033\[[0-9];[0-9]\+m\\)\\?')"
export ANSI_COLOR_PATTERN

#
# kcov args
#

# Default arguments to kcov, when coverage reporting is enabled
# Exclude the test files from coverage reports
# Write reports to a coverage/ directory in the root of the repo
kcov_args="--exclude-path=$test_directory $test_directory/../coverage"

#
# Testcase discovery function
#

readonly testcase_regex='^\s*(test[A-Za-z0-9_-]*\s*\(\))'

# Outputs a list of all testcases found in $1 to stdout
get_test_cases_from_file() {
  grep -E "$testcase_regex" "$1" | sed 's/^\s*\([A-Za-z0-9_-]*\).*$/\1/g'
}

#
# Run tests
#

suite() {
  # Iterate through all test files
  test_files="$(find "$test_directory" -name 'test_*' -type f)"
  for test_file in $test_files; do
    for test_case in $(get_test_cases_from_file "$test_file"); do
      suite_addTest "$test_case"
    done

    # shellcheck source=/dev/null
    . "$test_file"
  done
}

# Clean up spies and call the private deinitialization function after each test
tearDown() {
  cleanupSpies
  _shpyDeinit
}

if [ "${USE_KCOV+is_set}" ]; then
  # If $USE_KCOV is set, run the test through kcov for coverage reporting
  false && "kcov $kcov_args $test_file"
fi

# Source shpy and shunit2 to begin running tests
# shellcheck source=/dev/null
. "$test_directory/../shpy"
# shellcheck source=/dev/null
. "$test_directory/../shpy-shunit2"
# shellcheck source=/dev/null
. "$(command -v shunit2)"
