#!/bin/sh

createSpy() {
    if [ $# -eq 0 ]; then
        echo 'Usage: spy SPY_NAME'
        return 1
    fi

    # shellcheck disable=SC2039
    local val output errors_dir outputs_dir spy_name
    for spy_name; do true; done

    _shpyInit

    outputs_dir="$_shpy_spies_dir/outputs/$spy_name"
    errors_dir="$_shpy_spies_dir/errors/$spy_name"

    # Create empty directories for stdout and stderr outputs
    shpy_remove_dir_tree "$outputs_dir" || shpy_die "Error: \`shpy_remove_dir_tree '$outputs_dir'\` failed"
    shpy_remove_dir_tree "$errors_dir" || shpy_die "Error: \`shpy_remove_dir_tree '$errors_dir'\` failed"
    shpy_ensure_dir "$outputs_dir" || shpy_die "Error: \`shpy_ensure_dir '$outputs_dir'\` failed"
    shpy_ensure_dir "$errors_dir" || shpy_die "Error: \`shpy_ensure_dir '$errors_dir'\` failed"

    output_num=0
    error_num=0
    while getopts :o:r:e: opt; do
        case "$opt" in
            o)
              echo "$OPTARG" > "$outputs_dir/$output_num"
              output_num=$((output_num + 1))
              ;;
            e)
              echo "$OPTARG" > "$errors_dir/$error_num"
              error_num=$((error_num + 1))
              ;;
            r) val="${val-} $OPTARG" ;;
            *) shpy_die "Error: Unknown option -$OPTARG" ;;
        esac
    done

    shift $(( OPTIND - 1 ))
    OPTIND=1

    [ $# -eq 0 ] && shpy_die "Error: Missing spy name"

    _shpyResetSpy "$1"
    _shpySpySetReturnValue "$1" "${val:-0}"
    _shpyInjectSpyFunction "$1"
}

createStub() {
    createSpy "$@"
}

getSpyCallCount() {
    if [ $# -eq 0 ]; then
        echo 'Usage: getSpyCallCount SPY'
        return 1
    fi

    if [ -z "${_shpy_spies_dir:+is_set_and_not_null}" ]; then
      echo 0
    else
      _shpyGetDirectoryContentsCount "$_shpy_spies_dir/$1"
    fi
}

wasSpyCalledWith() {
    if [ $# -eq 0 ]; then
        echo 'Usage: wasSpyCalledWith SPY [ARG]...' >&2
        return 1
    fi

    # shellcheck disable=SC2039
    local count current name spy_path

    name=$1
    shift

    current=$(_shpyGetSpyCurent "$name")
    count=$(getSpyCallCount "$name")
    if [ "$current" -ge "$count" ]; then
        echo "Error: spy '$name' has not been called $current time(s)" >&2
        return 1
    fi

    spy_path="$_shpy_spies_dir/$name/$current" \
        _shpyMatchArgs "$@"
}

getArgsForCall() {
    if [ $# -ne 2 ]; then
        echo 'Usage: getArgsForCall SPY CALL_NUMBER' >&2
        return 1
    fi

    # shellcheck disable=SC2039
    local arg_file args call_index i name num_args spy_path res

    name=$1
    call_index=$(($2 - 1))

    if [ -z "${_shpy_spies_dir:+is_set_and_not_null}" ]; then
      echo "Error: no spies have been created" >&2
      return 1
    fi

    spy_path="$_shpy_spies_dir/$name"

    if [ ! -d "$spy_path" ]; then
        echo "Error: spy '$name' has not been set up" >&2
        return 1
    fi

    spy_path="$spy_path/$call_index"
    if [ ! -d "$spy_path" ]; then
        echo "Error: spy '$name' has not been called $((call_index + 1)) times" >&2
        return 1
    fi

    num_args=$(find "$spy_path" -maxdepth 1 -type f | wc -l)

    i=0
    res=""
    while [ "$i" -le "$num_args" ]; do
        arg_file="$spy_path/$i"
        if [ -f "$arg_file" ]; then
            args=$(cat "$arg_file")
            if printf "%s" "$args" | grep -qe "\\s"; then
                args="\"$args\""
            fi

            if [ ${#res} -gt 0 ]; then
                res=$(printf "%s %s" "$res" "$args")
            else
                res="$args"
            fi
        fi

        i=$((i + 1))
    done

    echo "$res"
}

examineNextSpyCall() {
    # shellcheck disable=SC2039
    local current

    if [ $# -eq 0 ]; then
        echo 'Usage: examineNextSpyCall SPY'
        return 1
    fi

    current=$(_shpyGetSpyCurent "$1")
    _shpySetSpyCurent "$1" $(( current + 1 ))
}

cleanupSpies() {
    if [ -n "${_shpy_spies_dir+is_set}" ]; then
      find "$_shpy_spies_dir" -maxdepth 1 -type f -exec sh -c '_shpyResetSpy "$1"' _ {} \;

      shpy_remove_dir_tree "$_shpy_spies_dir" || shpy_die "Error: \`shpy_remove_dir_tree '$_shpy_spies_dir'\` failed"
    fi
}

_shpyInit() {
    if [ -n "${_shpy_inited+is_set}" ]; then
        return
    fi

    _shpy_inited=1
    _shpy_spies_dir=$(shpy_make_temp_dir) || shpy_die "Error: \`shpy_make_temp_dir\` failed"
}

_shpyDeinit() {
    if [ -n "${_shpy_inited+is_set}" ]; then
      unset -v _shpy_inited
    fi

    if [ -n "${_shpy_spies_dir+is_set}" ]; then
      unset -v _shpy_spies_dir
    fi
}

_shpyResetSpy() {
    shpy_remove_dir_tree "$_shpy_spies_dir/$1" || shpy_die "Error: \`shpy_remove_dir_tree '$_shpy_spies_dir/$1'\` failed"

    eval unset "${1}_val"
    eval unset "${1}_output"
    eval unset "_shpy_${1}_current"
    unset "$1"
}

_shpyInjectSpyFunction() {
    eval "$1() { _shpyRunSpy '$1' \"\$@\"; }"
}

_shpyGetSpyCurent() {
    # shellcheck disable=SC2039
    local current
    eval current="\${_shpy_${1}_current-0}"
    printf '%s\n' "$current"
}

_shpySetSpyCurent() {
    eval "_shpy_$1_current=$2"
}

_shpyGetDirectoryContentsCount() {
    # shellcheck disable=SC2039
    local directory_path
    directory_path="$1"

    if [ -d "$directory_path" ]; then
      find "$directory_path" -maxdepth 1 ! -path "$directory_path" | wc -l
    else
      echo 0
    fi
}

_shpyMatchArgs() {
    # shellcheck disable=SC2039
    local arg argCount i

    # `spy_path` is set in the environment before invoking this function
    argCount=$(_shpyGetDirectoryContentsCount "$spy_path")
    if [ "$argCount" -ne $# ]; then
        return 1
    fi

    i=0
    while [ "$i" -lt "$argCount" ]; do
        arg=$(cat "$spy_path/$i")
        if [ "$arg" != "$1" ]; then
            return 1
        fi

        shift
        i=$(( i + 1 ))
    done

    return 0
}

_shpyRunSpy() {
    # shellcheck disable=SC2039
    local name
    name=$1
    shift

    _shpySpySaveArgs "$@"
    _shpySpyPrintOutput
    _shpySpyPrintErrorOutput
    _shpySpyGetReturnValue
}

_shpySpySaveArgs() {
    # shellcheck disable=SC2039
    local arg count i spy_path

    count=$(getSpyCallCount "$name")

    spy_path="$_shpy_spies_dir/$name/$count"
    shpy_ensure_dir "$spy_path" || shpy_die "Error: \`shpy_ensure_dir '$spy_path'\` failed"

    i=0
    for arg in "$@"; do
        printf '%s' "$arg" >|"$spy_path/$i"
        i=$(( i + 1 ))
    done
}

_shpySpyPrintOutput() {
    # shellcheck disable=SC2039
    local call_index count output outputs_dir output_fixture

    outputs_dir="$_shpy_spies_dir/outputs/$name"
    shpy_ensure_dir "$outputs_dir" || shpy_die "Error: \`shpy_ensure_dir '$outputs_dir'\` failed"

    count=$(getSpyCallCount "$name")
    call_index=$((count - 1))
    while [ $call_index -ge 0 ]; do
        output_fixture="$outputs_dir/$call_index"
        if [ -f "$output_fixture" ]; then
            output=$(cat "$output_fixture")
            break
        fi
        call_index=$((call_index - 1))
    done

    if [ -n "${output+is_set}" ]; then
        printf '%s' "$output"
    fi
}

_shpySpyPrintErrorOutput() {
    # shellcheck disable=SC2039
    local call_index count error_output errors_dir error_fixture

    errors_dir="$_shpy_spies_dir/errors/$name"
    shpy_ensure_dir "$errors_dir" || shpy_die "Error: \`shpy_ensure_dir '$errors_dir'\` failed"

    count=$(getSpyCallCount "$name")
    call_index=$((count - 1))
    while [ $call_index -ge 0 ]; do
        error_fixture="$errors_dir/$call_index"
        if [ -f "$error_fixture" ]; then
            error_output=$(cat "$error_fixture")
            break
        fi
        call_index=$((call_index - 1))
    done

    if [ -n "${error_output+is_set}" ]; then
        printf '%s' "$error_output" 1>&2
    fi
}

_shpySpySetReturnValue() {
    eval "_shpy_${1}_val=\$2"
}

_shpySpyGetReturnValue() {
    # shellcheck disable=SC2039
    local values count current_value
    eval values="\$_shpy_${name}_val"
    count=$(getSpyCallCount "$name")

    # $values is a space separated array. Iterate
    # $count times to set $current_value to the right entry.
    # If $count is greater than the number of return values,
    # $current_value is set to the last return value.
    for value in ${values:-0}; do
      current_value=$value

      count=$(( count - 1 ))
      [ $count -eq 0 ] && break
    done

    return "$current_value"
}

##### External Interface #####

shpy_make_temp_dir() {
    command mktemp -d shpy.XXXXXX
}

shpy_ensure_dir() {
    command mkdir -p -- "$1"
}

shpy_remove_dir_tree() {
    command rm -rf -- "$1"
}

shpy_die() {
    echo "${1:-"Error: aborting"}" >&2
    exit "${2:-1}"
}
